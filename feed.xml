<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://jpuum.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jpuum.github.io/" rel="alternate" type="text/html" /><updated>2021-09-13T21:00:43+03:00</updated><id>https://jpuum.github.io/feed.xml</id><entry><title type="html">Bias in image datasets</title><link href="https://jpuum.github.io/blog/2021/09/13/bias-in-image-data/" rel="alternate" type="text/html" title="Bias in image datasets" /><published>2021-09-13T00:00:00+03:00</published><updated>2021-09-13T00:00:00+03:00</updated><id>https://jpuum.github.io/blog/2021/09/13/bias-in-image-data</id><content type="html" xml:base="https://jpuum.github.io/blog/2021/09/13/bias-in-image-data/">&lt;div class=&quot;figure&quot;&gt;
    &lt;img src=&quot;/images/b0002_convnetbias/vancomparison.png&quot; style=&quot;width: 60%; display: block; margin: 0 auto;&quot; /&gt;
    &lt;div class=&quot;caption&quot;&gt;
        &lt;span class=&quot;caption-label&quot;&gt;Figure 1.&lt;/span&gt; (Left) how my ConvNet tries to classify a van after training 50 epochs on a custom dataset of 4000 images. The dataset contains four classes; a van, car, semi and pickup truck. The data is divided equally between the classes, but the images of vans also contain people more often than other classes. Thus the ConvNet learns to associate the waist of the guy with vans. After mitigating this problem by adding more images to the dataset and removing the particular bias, the model (right) learns vans' characteristics. 
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Bias in datasets cause problems (Figure $1$). Bias tends to be more common in smaller scale datasets because generally there’s less variety in data. However, larger datasets can suffer from bias as well! According to my own experience, the problem is often subtle and difficult to spot with human eye without any insights into the model (what the model sees). If the model struggles to generalize well (gap between training accuracy and test accuracy, validation accuracy might still be good), bias in the dataset might explain it. In the biased case the data generating distributions for training and testing are different. Quite expectedly the model performs poorly during the testing phase as it has not learned the same or even closely similar data distribution. Fortunately some bias in datasets can be detected by observing gradient information flowing into the last convolutional layer of the model. &lt;a href=&quot;https://arxiv.org/pdf/1610.02391.pdf&quot;&gt;Selvaraju et al.&lt;/a&gt; takes advantage of this technique in their Grad-CAM algorithm.&lt;/p&gt;

&lt;h2 id=&quot;grad-cam-intuition&quot;&gt;Grad-CAM intuition&lt;/h2&gt;

&lt;p&gt;Before understanding the algorithm intuitively, let’s show the math to which we can map our intuition.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L_{Grad-CAM}^{c} = ReLU\left ( \sum_{k} \color{DarkRed}{a_{k}^{c}} \color{Blue}{A^{k}} \right ) \tag{1}&lt;/script&gt;

&lt;p&gt;where&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\color{DarkRed}{a_{k}^{c}} = \color{magenta}{\frac{1}{Z} \sum_{i} \sum_{j}} \color{Red}{\frac{\delta y^{c}}{\delta A_{ij}^{k}}} \tag{2}&lt;/script&gt;

&lt;p&gt;Here $\color{Blue}{A^{k}}$ represents…&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
    &lt;img src=&quot;/images/b0002_convnetbias/nhl_scaled_50.gif&quot; style=&quot;width: 60%; display: block; margin: 0 auto;&quot; /&gt;
    &lt;div class=&quot;caption&quot;&gt;
        &lt;span class=&quot;caption-label&quot;&gt;Figure 2.&lt;/span&gt; Recording what your ConvNet sees during training through Grad-CAM can help diagnose problems early. 
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;reducing-bias&quot;&gt;Reducing bias&lt;/h2&gt;

&lt;p&gt;The dataset is biased. It’s time we get rid of the bias as much as we can. What we can do is add images to the dataset which counteract the bias. If we have a dataset of some car models and one of the classes contain clouds in the background while others don’t, it is quite likely that the model will associate the clouds with the specific car model. Now if images of cars of the other classes also contain clouds in the background, the dataset is less biased. Generally, collecting a bigger balanced dataset reduces bias. However, a big dataset does not guarantee an unbiased model. Collecting data and building a dataset is an art in itself.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This essay briefly looks into bias in image datasets. We cover what is bias in image datasets, what causes it, a technique/algorithm to spot it and how to counteract. If you are not familiar with the topic beforehand, this essay helps you get started. Beyond reading I encourage you to code &lt;a href=&quot;https://arxiv.org/pdf/1610.02391.pdf&quot;&gt;Grad-CAM&lt;/a&gt; from scratch to get a deeper understanding why it works.&lt;/p&gt;</content><author><name></name></author></entry><entry><title type="html">Detecting edges in RGB images</title><link href="https://jpuum.github.io/blog/2020/11/09/rgb-edge-detection/" rel="alternate" type="text/html" title="Detecting edges in RGB images" /><published>2020-11-09T00:00:00+02:00</published><updated>2020-11-09T00:00:00+02:00</updated><id>https://jpuum.github.io/blog/2020/11/09/rgb-edge-detection</id><content type="html" xml:base="https://jpuum.github.io/blog/2020/11/09/rgb-edge-detection/">This post provides a brief review of a [paper](https://www.researchgate.net/publication/209566657_A_Color_Edge_Detection_Algorithm_in_RGB_Color_Space) by Dutta and Chaudhuri. The paper proposes an algorithm for RGB image edge detection. The proposed algorithm uses functions also in use in state-of-the-art methods today. For demonstration, I code the [algorithm](https://github.com/jpuum/rgb_edge_detection) from scratch and compare it with state-of-the-art methods.

## Overview

Edge detection is a fundamental tool in computer vision. It reduces data, while preserving useful structural information about object boundaries. A greyscale image contains about 90% of the edge information of its RGB correspondence; the remaining 10% can be crucial. The paper proposes a method which consists of smoothing, directional color difference calculation, thresholding and thinning {% cite duttaedgedetection %}.

To test the algorithm, I use an image of a beautiful red Tesla Model S (Figure $1$). I will go through the algorithm step by step.

&lt;div class='figure'&gt;
    &lt;img src=&quot;/images/t_models.jpg&quot;
         style=&quot;width: 60%; display: block; margin: 0 auto;&quot;/&gt;
    &lt;div class='caption'&gt;
        &lt;span class='caption-label'&gt;Figure 1.&lt;/span&gt; The original image of Tesla Model S. Photo credit: Nick Dimbleby.
    &lt;/div&gt;
&lt;/div&gt;

## Adaptive median filter

The Median filter is widely used in computer vision applications. It has great noise reduction capabilities for impulse noise, also called the &quot;salt and pepper&quot; noise. It works by moving a window over an image, where each pixel is located at the center of the window once (assume appropriate padding). Output at each pixel is the median of values within the window. As one might think, each color channel is operated separately. A problem with the median filter is that it does a poor job at preserving detail of an image while smoothing the non-impulse noise. The paper proposes an adaptive median filter to alleviate this problem. Intuitively, it additionally verifies which pixels are noise and which are not. An interested reader can find pseudocode of the adaptive median filter algorithm in the paper {% cite duttaedgedetection %}. 

&lt;div class='figure'&gt;
    &lt;img src=&quot;/images/t_models_median.jpg&quot;
         style=&quot;width: 60%; display: block; margin: 0 auto;&quot;/&gt;
    &lt;div class='caption'&gt;
        &lt;span class='caption-label'&gt;Figure 2.&lt;/span&gt; Adaptive median filter moved over the image.
    &lt;/div&gt;
&lt;/div&gt;

Effect of the adaptive median filter is shown in (Figure $2$). Difference between the original and filtered image is subtle. The latter appears little smoother.

## Directional masks

Directional color difference calculation (image gradients) is a critical part of the proposed algorithm. It locates areas where abrupt changes of RGB values occur; this is where the edges are! Roughly speaking, edges exist in four directions; horizontal, vertical, ascending and descending diagonal. The four directions are represented by masks or filters. The masks proposed by the paper are illustrated in (Figure $3$) {% cite duttaedgedetection %}.

&lt;div class='figure'&gt;
    &lt;img src=&quot;/images/dirmasks.png&quot;
         style=&quot;width: 80%; display: block; margin: 0 auto;&quot;/&gt;
    &lt;div class='caption'&gt;
        &lt;span class='caption-label'&gt;Figure 3.&lt;/span&gt; Four 3x3 directional masks as proposed by the paper.
    &lt;/div&gt;
&lt;/div&gt;

Before applying the masks, pixels are transformed to single valued attributes. The transformation is achieved by weighted addition of RGB components, as

$Pixel(i,j) = 2 * red(i,j) + 3 * green(i,j) + 4 * blue(i,j)$.

The masks are applied as a convolution with the image. The operator flips the mask horizontally and vertically (transpose). Then the flipped mask moves over the image, taking the Hadamard product (elementwise multiplication) between the current window and the mask at each location. The elements of a resulting matrix are summed up. At each location there are four results as there are four masks which are applied separately. The paper suggests to choose the largest resulting value as output. The output values build the gradient image.

&lt;div class='figure'&gt;
    &lt;img src=&quot;/images/t_models_dirmasks.jpg&quot;
         style=&quot;width: 60%; display: block; margin: 0 auto;&quot;/&gt;
    &lt;div class='caption'&gt;
        &lt;span class='caption-label'&gt;Figure 4.&lt;/span&gt; Directional masks applied with convolution.
    &lt;/div&gt;
&lt;/div&gt;

(Figure $4$) shows the effect of directional color difference calculation on the previously filtered image. At this point, the image background resembles static of an old television. Outlines of the Tesla and the road are there though!

## Thresholding

Thresholding operation is straightforward. It is responsible for producing the visual edge map from the gradient image. In the algorithm, we choose a threshold, and turn every pixel smaller than the threshold white and every pixel larger than equal to the threshold black. That's really all it is. The paper suggests a threshold of $1.2t$, where $t$ is an average value of maximum color difference. In other words, $t$ is equal to the average value of the gradient image.

&lt;div class='figure'&gt;
    &lt;img src=&quot;/images/t_models_threshold.jpg&quot;
         style=&quot;width: 60%; display: block; margin: 0 auto;&quot;/&gt;
    &lt;div class='caption'&gt;
        &lt;span class='caption-label'&gt;Figure 5.&lt;/span&gt; Thresholded image after directional masks.
    &lt;/div&gt;
&lt;/div&gt;

(Figure $5$) shows the effect of thresholding on the gradient image. The result is already a quite decent edge map. The edges are still somewhat thick though, and there is some noise as well.

## Thinning

Thinning alleviates the problem seen in (Figure $5$) to some degree. Thinning thins the thickest edges and the thinnest edges and dots will disappear. This means it tries to keep the most important edges and get rid of the most spurious edges.

Two masks are used in thinning (Figure $6$). One mask works in the horizontal direction and another in the vertical direction. The masks are applied as a convolution with the image.

&lt;div class='figure'&gt;
    &lt;img src=&quot;/images/thin_masks.png&quot;
         style=&quot;width: 60%; display: block; margin: 0 auto;&quot;/&gt;
    &lt;div class='caption'&gt;
        &lt;span class='caption-label'&gt;Figure 6.&lt;/span&gt; Thinning masks. The mask on the left works in the horizontal and the mask on the right works in the vertical direction.
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class='figure'&gt;
    &lt;img src=&quot;/images/t_models_thinned.jpg&quot;
         style=&quot;width: 60%; display: block; margin: 0 auto;&quot;/&gt;
    &lt;div class='caption'&gt;
        &lt;span class='caption-label'&gt;Figure 7.&lt;/span&gt; Thinned image after thresholding.
    &lt;/div&gt;
&lt;/div&gt;

(Figure $7$) is the final edge map produced by the proposed algorithm. It removes many unwanted dots and spurious edges from the previous step.

## Comparison and conclusion

[OpenCV Canny](https://docs.opencv.org/master/da/d22/tutorial_py_canny.html) is a popular implementation of Canny edge detection algorithm. The algorithm is one of state-of-the-art edge detectors available today. The paper uses Canny as well to compare the methods.

&lt;div class='figure'&gt;
    &lt;img src=&quot;/images/comparison.png&quot;
         style=&quot;width: 60%; display: block; margin: 0 auto;&quot;/&gt;
    &lt;div class='caption'&gt;
        &lt;span class='caption-label'&gt;Figure 8.&lt;/span&gt; Left: Proposed algorithm, Right: OpenCV Canny.
    &lt;/div&gt;
&lt;/div&gt;

(Figure $8$) summarizes the results. To conclude, the proposed algorithm is able to produce edge maps which are comparable with the state-of-the-art method. OpenCV Canny still does little better job at getting rid of unwanted dots. It also presents the edges finer. I believe these minor differences partly stem from the thresholding algorithm in OpenCV Canny. It uses [Hysteresis Thresholding](https://scikit-image.org/docs/dev/auto_examples/filters/plot_hysteresis.html), which outperforms the one proposed in the paper.</content><author><name></name></author><summary type="html">I provide a brief review of a paper by Dutta and Chaudhuri, and compare its methods to the state-of-the-art tools.</summary></entry></feed>